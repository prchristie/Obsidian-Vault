{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Books/Implementing%20Domain-Driven%20Design/Bounded%20Context/","text":"","title":"Bounded Context"},{"location":"Books/Implementing%20Domain-Driven%20Design/Domain%20Services/","text":"Stateless services inside the domain that perform domain logic that doesn't necessarily belong to any singular entity or value object. Domain services are especially useful if the domain logic happens to be working with multiple domain objects.","title":"Domain Services"},{"location":"Software%20Lifecycle/Agile/Acceptance%20Criteria/","text":"software-engineering #agile \u00b6 The acceptance criteria of a user story is intended to provide a set of conditions that must be achieved before a story is complete. They provide a testing framework for a story. Example: If we use ![[Example user story]] as our story, we might say that the acceptance criteria could be * The application will show all drivers in a 10km range that were online within the last 20 minutes and are not currently in an active ride * The application will allow a passenger [[Actor]] to select any of the displayed drivers In a future story, we might add \"As a passenger, I want to select the maximum range to find drivers, so that I can find drivers in low density areas\" and \"As a passenger, I want to be able to view a drivers profile with photos and ratings, so that I can decide if I want to ride with the selected driver.\" References: https://stormotion.io/blog/how-to-write-a-good-user-story-with-examples-templates/","title":"Acceptance Criteria"},{"location":"Software%20Lifecycle/Agile/Acceptance%20Criteria/#software-engineering-agile","text":"The acceptance criteria of a user story is intended to provide a set of conditions that must be achieved before a story is complete. They provide a testing framework for a story. Example: If we use ![[Example user story]] as our story, we might say that the acceptance criteria could be * The application will show all drivers in a 10km range that were online within the last 20 minutes and are not currently in an active ride * The application will allow a passenger [[Actor]] to select any of the displayed drivers In a future story, we might add \"As a passenger, I want to select the maximum range to find drivers, so that I can find drivers in low density areas\" and \"As a passenger, I want to be able to view a drivers profile with photos and ratings, so that I can decide if I want to ride with the selected driver.\" References: https://stormotion.io/blog/how-to-write-a-good-user-story-with-examples-templates/","title":"software-engineering #agile"},{"location":"Software%20Lifecycle/Agile/Agile%20Development/","text":"Agile development is about iteratively improving a product by reacting to the feedback of a client. Its about delivering value quicker and getting feedback as soon as possible. It does not prescribe the use of [[Use Case]]s or [[User Stories]], and can actually be used together as described in [[Agile Granularity]], where we see [[Use Case]]s as the higher level description that lead to [[User Stories]].","title":"Agile Development"},{"location":"Software%20Lifecycle/Agile/Agile%20Granularity/","text":"![[Agile Granularity Image.png]] The top orange brick describes the goals of the business/software/application/etc that are to be achieved by the [[System]]. These can be called [[Use Case]]s or User Features. They are very high level descriptions of the overarching functionality of the program from a user perspective. I do not understand Epics yet. [[User Stories]] are items that are small enough to be finished in a few days, and describe a single [[Vertical Slice]] of functionality. They are the smallest unit of work that represents some value to the user. Whereas a [[Use Case]] might describe \"Select Driver\" as a feature, [[User Stories]] might say \"as a <[[Actor]]>, I want to be able to select from all drivers within a certain range, so that I can pick the best driver for me\" References: https://www.visual-paradigm.com/scrum/user-story-splitting-vertical-slice-vs-horizontal-slice/","title":"Agile Granularity"},{"location":"Software%20Lifecycle/Agile/User%20story%20responsibilities/","text":"[[User Stories]] can be created by anyone in a business. They are intended to be based around the business, and so they are usually written in business language anyway. The intention to provide immediate feedback to a non-technical as to what is being worked on. They can be created at any time and is encouraged to be created when they are needed. These fit into [[Agile Development]] by allowing the business to see what is happening easier Reference: https://stormotion.io/blog/how-to-write-a-good-user-story-with-examples-templates/ software-engineering #agile \u00b6","title":"User story responsibilities"},{"location":"Software%20Lifecycle/Agile/User%20story%20responsibilities/#software-engineering-agile","text":"","title":"software-engineering #agile"},{"location":"Software%20Lifecycle/Use%20Cases/Actor/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 The roles that make use of a use case. There are two types of actor: 1. Primary actors: Actors that will initiate use cases. 2. Seconary actors: Actors that react to actions in a use case. Primary actors examples: 1. Borrower 2. Librarian 3. Operator Secondary actors examples: 1. Bank 2. Anti-virus software 3. SMS Server 4. Timer Can be human or an external system When naming, we should take care to describe the role of the actor, not the name. Represented in a [[Use Case Diagram]] with a stick figure with the name underneath ![[Actor in use case diagram.png]]","title":"Actor"},{"location":"Software%20Lifecycle/Use%20Cases/Actor/#software-engineering-software-design-uml-use-case-diagram","text":"The roles that make use of a use case. There are two types of actor: 1. Primary actors: Actors that will initiate use cases. 2. Seconary actors: Actors that react to actions in a use case. Primary actors examples: 1. Borrower 2. Librarian 3. Operator Secondary actors examples: 1. Bank 2. Anti-virus software 3. SMS Server 4. Timer Can be human or an external system When naming, we should take care to describe the role of the actor, not the name. Represented in a [[Use Case Diagram]] with a stick figure with the name underneath ![[Actor in use case diagram.png]]","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Loan%20book%20from%20library%20use%20case/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 Texture use case: A borrower walks into a library wanting to loan a book They search for the book but do not find it They approach a librarian and give them the name of the title The librarian searches for the book and finds it. The borrower gives the librarian their name and account information. The librarian scans the book and lends it to the borrower Is this not more of a [[Story]]? What actors can be discovered from the passage texture use case? 1. Borrower 2. Librarian What is the first use case we can discover from the texture use case? Look for the first thing that must happen, or if multiple things can occur simultaneously first, the first mentioned thing. In this case Search for book \"They approach a librarian and give them the name of the title\" is not a use case? Probably because that is part of the search for a book use case. I guess it would describe that we need functionality to find books based on title IMPORTANT : The use case must belong in the [[System]]. Walk into a library is not a use case because it does not belong in the system. But if we were making something like an entrance to a library than maybe we would. Its system dependent. Which [[Actor]]s can search for a book? The librarian and the borrower Source: https://www.youtube.com/watch?v=uN-zt7bXbnQ&list=PLlup9oTyUUAtzyYN30-qRrscg17EtQFbT&index=6","title":"Loan book from library use case"},{"location":"Software%20Lifecycle/Use%20Cases/Loan%20book%20from%20library%20use%20case/#software-engineering-software-design-uml-use-case-diagram","text":"Texture use case: A borrower walks into a library wanting to loan a book They search for the book but do not find it They approach a librarian and give them the name of the title The librarian searches for the book and finds it. The borrower gives the librarian their name and account information. The librarian scans the book and lends it to the borrower Is this not more of a [[Story]]? What actors can be discovered from the passage texture use case? 1. Borrower 2. Librarian What is the first use case we can discover from the texture use case? Look for the first thing that must happen, or if multiple things can occur simultaneously first, the first mentioned thing. In this case Search for book \"They approach a librarian and give them the name of the title\" is not a use case? Probably because that is part of the search for a book use case. I guess it would describe that we need functionality to find books based on title IMPORTANT : The use case must belong in the [[System]]. Walk into a library is not a use case because it does not belong in the system. But if we were making something like an entrance to a library than maybe we would. Its system dependent. Which [[Actor]]s can search for a book? The librarian and the borrower Source: https://www.youtube.com/watch?v=uN-zt7bXbnQ&list=PLlup9oTyUUAtzyYN30-qRrscg17EtQFbT&index=6","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Scenario/","text":"software-engineering #software-design #UML \u00b6 A scene of how a system should or shall be used by [[Actor]]s in a system Description of a scenario should at the very least contain * Statement of the purpose of the scenario * Individual user or transaction that is being followed * Assumptions about equipment or software * Steps of the scenario We often create a scenario before we create a [[Use Case Diagram]] References: * http://www.cs.cornell.edu/courses/cs5150/2015fa/slides/D2-use-cases.pdf","title":"Scenario"},{"location":"Software%20Lifecycle/Use%20Cases/Scenario/#software-engineering-software-design-uml","text":"A scene of how a system should or shall be used by [[Actor]]s in a system Description of a scenario should at the very least contain * Statement of the purpose of the scenario * Individual user or transaction that is being followed * Assumptions about equipment or software * Steps of the scenario We often create a scenario before we create a [[Use Case Diagram]] References: * http://www.cs.cornell.edu/courses/cs5150/2015fa/slides/D2-use-cases.pdf","title":"software-engineering #software-design #UML"},{"location":"Software%20Lifecycle/Use%20Cases/Story/","text":"software-engineering #software-design \u00b6 A notion of what should occur within a system. Should relate to * System possibilities * Types of interactions Related: [[Use Case]]","title":"Story"},{"location":"Software%20Lifecycle/Use%20Cases/Story/#software-engineering-software-design","text":"A notion of what should occur within a system. Should relate to * System possibilities * Types of interactions Related: [[Use Case]]","title":"software-engineering #software-design"},{"location":"Software%20Lifecycle/Use%20Cases/System/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 The ground upon which an [[Actor]] interacts - the space that a developer is actually developing. System examples: * In a very general case: BRDIS * A more targetted case might be: Antivirus scanning.","title":"System"},{"location":"Software%20Lifecycle/Use%20Cases/System/#software-engineering-software-design-uml-use-case-diagram","text":"The ground upon which an [[Actor]] interacts - the space that a developer is actually developing. System examples: * In a very general case: BRDIS * A more targetted case might be: Antivirus scanning.","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Descriptions/","text":"UML #software-engineering #software-design #use-case-diagram \u00b6 These are at what level we describe a [[Use Case]] in our system. From high level for business people to very technical for developers 4 different kinds of [[Use Case]] descriptions 1. High level: General & short descriptions for business folk 2. Expanded (detailed): A step by step of how the use case is enacted 3. Essential: A technical description with no talk of technology - EG technology independent implementation. 4. Real: How we would actually implement the use case in the current system.\\ References: https://www.youtube.com/watch?v=sQgoFjxSdxo https://www.youtube.com/watch?v=jtWj-rreoxs&list=PLlup9oTyUUAtzyYN30-qRrscg17EtQFbT&index=6","title":"Use Case Descriptions"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Descriptions/#uml-software-engineering-software-design-use-case-diagram","text":"These are at what level we describe a [[Use Case]] in our system. From high level for business people to very technical for developers 4 different kinds of [[Use Case]] descriptions 1. High level: General & short descriptions for business folk 2. Expanded (detailed): A step by step of how the use case is enacted 3. Essential: A technical description with no talk of technology - EG technology independent implementation. 4. Real: How we would actually implement the use case in the current system.\\ References: https://www.youtube.com/watch?v=sQgoFjxSdxo https://www.youtube.com/watch?v=jtWj-rreoxs&list=PLlup9oTyUUAtzyYN30-qRrscg17EtQFbT&index=6","title":"UML #software-engineering #software-design #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Diagram/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 Example: [[Loan book from library use case]] Captures system behaviour from the perspective of an [[Actor]]. They do not capture how the system will do anything, only what the system will do. Made up of 5 distinct elements [[Actor]]s: The different players in a scenario [[Use Case]]s: Represented as a circle or oval inside the system Subjects [[Use Case Relationships]] [[System]] Use case diagrams may have multiple use cases represented within them, but they tend to represent a singular [[Story]] or [[Scenario]] [[Actor]]s should have a line connecting them to the [[Use Case]] they can perform the use case","title":"Use Case Diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Diagram/#software-engineering-software-design-uml-use-case-diagram","text":"Example: [[Loan book from library use case]] Captures system behaviour from the perspective of an [[Actor]]. They do not capture how the system will do anything, only what the system will do. Made up of 5 distinct elements [[Actor]]s: The different players in a scenario [[Use Case]]s: Represented as a circle or oval inside the system Subjects [[Use Case Relationships]] [[System]] Use case diagrams may have multiple use cases represented within them, but they tend to represent a singular [[Story]] or [[Scenario]] [[Actor]]s should have a line connecting them to the [[Use Case]] they can perform the use case","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Flow%20as%20a%20Dialog/","text":"A way for writing the steps of a use case. Simply write the steps as a numbered list of Actor does X System responds/secondary actors do","title":"Use Case Flow as a Dialog"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Flow%20as%20a%20Table/","text":"Represent each actor and the system as a column, and each row is a step + reaction set Actor1 System Secondary Actor Initiates by doing X Reacts to X by doing Y Does Z","title":"Use Case Flow as a Table"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Relationships/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 These are for actions in a [[Use Case Diagram]] that are not initiated by an [[Actor]] Includes: Must always occur after a base [[Use Case]] Extends: A use case that may or may not occur after another use case, but does not always need to Generalization: Indicates a more specific instance of an actor or use case Includes We denote an includes relationship with a dotted line and arrow pointed to the included use case ![[Include Relationship Diagram.png]] Extends We denote extend the opposite way as an include relationship ![[Extended Relationship Diagram.png]] Generalization ![[Generalization Relationship Diagram.png]] Example: If we have a login system, we can say that verifying login details is an includes relationship , while displaying an error message if details are incorrect is an extends relationship to login References: https://www.youtube.com/watch?v=sQgoFjxSdxo","title":"Use Case Relationships"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case%20Relationships/#software-engineering-software-design-uml-use-case-diagram","text":"These are for actions in a [[Use Case Diagram]] that are not initiated by an [[Actor]] Includes: Must always occur after a base [[Use Case]] Extends: A use case that may or may not occur after another use case, but does not always need to Generalization: Indicates a more specific instance of an actor or use case Includes We denote an includes relationship with a dotted line and arrow pointed to the included use case ![[Include Relationship Diagram.png]] Extends We denote extend the opposite way as an include relationship ![[Extended Relationship Diagram.png]] Generalization ![[Generalization Relationship Diagram.png]] Example: If we have a login system, we can say that verifying login details is an includes relationship , while displaying an error message if details are incorrect is an extends relationship to login References: https://www.youtube.com/watch?v=sQgoFjxSdxo","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case/","text":"software-engineering #software-design #UML #use-case-diagram \u00b6 Abbreviation: UC Example: [[Loan book from library use case]] Related: [[Use Case Diagram]] A task that an [[Actor]] can perform with the help of the [[System]]. Set of actions that lead to the goal. Describes a singular feature provided by the system, where the feature could consist of multiple actions. [[Use Case Descriptions]] occur at multiple levels of abstraction. The most common are usually very high level. They are often an alternative to [[User Stories]], or perhaps a higher level kind of user story which can be used to create user stories. Example: Commenting on an article. Use case might be Comment on article but internally you need user auth, validation of entered data, etc It is often a good idea to try and start with a [[Scenario]], a sentence description of the use case before we try and break into the meat and potatoes of the use case. Start with simple use cases when starting a project. The simpler ones will create the foundation for future implementation We can use the [[Use Case Flow of Events]] guidelines to help us recognize when we should break a use case into smaller use cases. Description of a use case should include * Name of the use case/goal * [[Actor]]s * Preconditions * Regular steps * Alternative paths * Post conditions Represented as an oval inside the [[System]] in a use case diagram ![[Use case in use case diagram.png]] References: http://www.cs.cornell.edu/courses/cs5150/2015fa/slides/D2-use-cases.pdf https://www.easyagile.com/blog/use-cases-vs-user-stories/#:~:text=User%20stories%20are%20simple%2C%20short,cases%20contain%20much%20more%20context. for use case description guide lines","title":"Use Case"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20Case/#software-engineering-software-design-uml-use-case-diagram","text":"Abbreviation: UC Example: [[Loan book from library use case]] Related: [[Use Case Diagram]] A task that an [[Actor]] can perform with the help of the [[System]]. Set of actions that lead to the goal. Describes a singular feature provided by the system, where the feature could consist of multiple actions. [[Use Case Descriptions]] occur at multiple levels of abstraction. The most common are usually very high level. They are often an alternative to [[User Stories]], or perhaps a higher level kind of user story which can be used to create user stories. Example: Commenting on an article. Use case might be Comment on article but internally you need user auth, validation of entered data, etc It is often a good idea to try and start with a [[Scenario]], a sentence description of the use case before we try and break into the meat and potatoes of the use case. Start with simple use cases when starting a project. The simpler ones will create the foundation for future implementation We can use the [[Use Case Flow of Events]] guidelines to help us recognize when we should break a use case into smaller use cases. Description of a use case should include * Name of the use case/goal * [[Actor]]s * Preconditions * Regular steps * Alternative paths * Post conditions Represented as an oval inside the [[System]] in a use case diagram ![[Use case in use case diagram.png]] References: http://www.cs.cornell.edu/courses/cs5150/2015fa/slides/D2-use-cases.pdf https://www.easyagile.com/blog/use-cases-vs-user-stories/#:~:text=User%20stories%20are%20simple%2C%20short,cases%20contain%20much%20more%20context. for use case description guide lines","title":"software-engineering #software-design #UML #use-case-diagram"},{"location":"Software%20Lifecycle/Use%20Cases/Use%20case%20flow%20of%20events/","text":"A step by step guide to how the actor interacts with the system, and what the system shall do in response. A [[use case]] and its steps should not have any interruptions - no steps that are Wait for X to do Y That would consistute a second, separate use case. The use case should not have any IF statements . These are also separate use cases There are many ways to represent these, some common ones are * [[Use Case Flow as a Dialog]] * [[Use Case Flow as a Table]] References: https://www.youtube.com/watch?v=qHNSwJ_62U4","title":"Use case flow of events"},{"location":"Software%20Lifecycle/User%20Stories/Example%20user%20story/","text":"As a passenger, I want several available drivers to be displayed so that I can choose the most suitable optoin for me","title":"Example user story"},{"location":"Software%20Lifecycle/User%20Stories/Excellent%20resources/","text":"","title":"Excellent resources"},{"location":"Software%20Lifecycle/User%20Stories/INVEST/","text":"Letter Meaning I Independent of all other stories N Negotiable V Valuable for customer E Estimatable S Small enough to fit in a single iteration T Testable Reference: https://www.agilealliance.org/glossary/invest/","title":"INVEST"},{"location":"Software%20Lifecycle/User%20Stories/Steps%20to%20write%20a%20good%20user%20story/","text":"As a basic template: \"As a |[[Actor]]|, I want |an action|, so that |benefit|\" Make list of [[Actor]]s Define the [[Use Case]]s in the system. What actions might they take? Each story should contain a single action, use cases may be made up of multiple use cases. Stories should describe an intention. \"I am a user and I want to be able to X\" Nothing to do with tech. Understand what value each [[Use Case]] will bring and if its profitable This corresponds to the \"so that\" section of [[User Stories]] Create [[User Stories]] out of the [[Use Case]]s. Discuss [[Acceptance Criteria]] and implementation strategies. Reference: https://stormotion.io/blog/how-to-write-a-good-user-story-with-examples-templates/","title":"Steps to write a good user story"},{"location":"Software%20Lifecycle/User%20Stories/User%20Stories/","text":"Often works as an alternative to [[Use Case]]s User stories are useful for the same reason use cases are; they communicate the why of a feature/use case without the how, such that a non-technical person can contribute to planning. They should describe the shortest possible interaction with the system. \"As a PM, I want to communicate the why without dictating the how so that the engineers can develop a how based on user needs\" User stories should contain a [[Vertical Slice]] of functionality, implying that the implementation of a user story should include everything needed to do what the user wants. This is to provide immediate business value that is testable. User stories are \"a chunk of functionality that is of value to the customer\" User stories should try and be written in the style of ![[INVEST]] [[Example user story]] User stories should also have an [[Acceptance Criteria]], which describe conditions that need to be met before a story is completed. Relate: [[Agile Development]] Related: [[User Story Styles]]","title":"User Stories"},{"location":"Software%20Lifecycle/User%20Stories/Vertical%20Slice/","text":"","title":"Vertical Slice"}]}